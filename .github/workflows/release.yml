name: Build and Release

on:
  push:
    branches:
      - master
    paths:
      - "src/**"
      - "src-tauri/**"
      - "proto/**"
      - "package.json"
      - "scripts/**"
  pull_request:
    branches:
      - master
    paths:
      - "src/**"
      - "src-tauri/**"
      - "proto/**"
      - "package.json"
      - "scripts/**"

jobs:
  determine_changes:
    name: Determine Version Change & Release Need
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check_version_change.outputs.VERSION_CHANGED }}
      current_version: ${{ steps.get_version.outputs.CURRENT_VERSION }}
      is_prerelease: ${{ steps.check_prerelease.outputs.IS_PRERELEASE }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from package.json
        id: get_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "CURRENT_VERSION=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get latest git tag
        id: tag
        uses: actions/github-script@v7
        with:
          script: |
            const tags = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 30
            });
            return tags.data.length > 0 ? tags.data[0].name : null;

      - name: Check if version changed
        id: check_version_change
        run: |
          LATEST_TAG="${{ steps.tag.outputs.result }}"
          CURRENT_VERSION="${{ steps.get_version.outputs.CURRENT_VERSION }}"
          echo "Latest tag: $LATEST_TAG"
          echo "Current version: $CURRENT_VERSION"
          if [ "$LATEST_TAG" != "$CURRENT_VERSION" ]; then
            echo "VERSION_CHANGED=true" >> $GITHUB_OUTPUT
          else
            echo "VERSION_CHANGED=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Check if prerelease
        id: check_prerelease
        run: |
          VERSION="${{ steps.get_version.outputs.CURRENT_VERSION }}"
          if [[ "$VERSION" == *-* ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

  create_release:
    if: needs.determine_changes.outputs.version_changed == 'true' && github.event_name != 'pull_request'
    name: Create GitHub Release
    needs: determine_changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.determine_changes.outputs.current_version }}
          name: ${{ needs.determine_changes.outputs.current_version }}
          prerelease: ${{ needs.determine_changes.outputs.is_prerelease }}
          generate_release_notes: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

  build:
    name: Build Tauri App
    needs: [ determine_changes, create_release ]
    if: needs.determine_changes.outputs.version_changed == 'true' && github.event_name != 'pull_request'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest ]
        # Map os to cargo target
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: 'pnpm'


      - name: Install protoc (Protocol Buffers compiler)
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.PAT }}
      - name: Install dependencies
        run: pnpm install
      - name: Sync version to Rust
        run: pnpm sync
      - name: Cache APT packages
        if: matrix.os == 'ubuntu-latest'
        uses: awalsh128/cache-apt-pkgs-action@v1.5.3
        with:
          packages: >
            libwebkit2gtk-4.1-dev
            libgtk-3-dev
            libappindicator3-dev
            librsvg2-dev
            libglib2.0-dev
            libgirepository1.0-dev
            libcairo2-dev
            libpango1.0-dev
            libatk1.0-dev
            libgdk-pixbuf2.0-dev
            libjson-glib-dev
            pkg-config
          version: 1  # Increment if dependencies change
          execute_install_scripts: false  # Usually safe as false; set true if issues occur

      - name: Install Rust (nightly)
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly
          target: ${{ matrix.target }}


      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/git
            ~/.cargo/registry
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('src-tauri/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build Tauri binary
        run: |
          pnpm tauri build

      - name: Upload artifact to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.determine_changes.outputs.current_version }}
          files: |
            src-tauri/target/release/bundle/*/*
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}